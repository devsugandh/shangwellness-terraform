version: 0.2

env:
  variables:
    AWS_REGION: ap-south-1
    AWS_ACCOUNT_ID: 123456789012
    PROJECT_NAME: my-app
    ENVIRONMENT: prod
    IMAGE_REPO_NAME: my-app-prod
    CONTAINER_NAME: web-app
    ECR_URI: 123456789012.dkr.ecr.ap-south-1.amazonaws.com/my-app-prod

phases:
  install:
    runtime-versions:
      docker: 18
      nodejs: 18
    commands:
      - echo "Installing additional tools..."
      - yum install -y git jq

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI
      - echo "Setting image tag..."
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7)
      - echo $IMAGE_TAG > imageTag.txt
      - echo "Image tag: $IMAGE_TAG"

  build:
    commands:
      - IMAGE_TAG=$(cat imageTag.txt)
      - echo "Building Docker image..."
      - docker build -t $ECR_URI:$IMAGE_TAG .
      - echo "Creating imageDetail.json..."
      - printf '{"ImageURI":"%s"}' $ECR_URI:$IMAGE_TAG > imageDetail.json

  post_build:
    commands:
      - IMAGE_TAG=$(cat imageTag.txt)
      - echo "Pushing Docker image to Amazon ECR..."
      - docker push $ECR_URI:$IMAGE_TAG
      - echo "Generating imagedefinitions.json..."
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$ECR_URI:$IMAGE_TAG" > imagedefinitions.json
      - echo "Generating taskdef.json..."
      - |
        cat > taskdef.json << EOF
        {
          "family": "${PROJECT_NAME}-${ENVIRONMENT}-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/${PROJECT_NAME}-${ENVIRONMENT}-ecs-task-execution-role",
          "taskRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/${PROJECT_NAME}-${ENVIRONMENT}-ecs-task-role",
          "containerDefinitions": [
            {
              "name": "${CONTAINER_NAME}",
              "image": "${ECR_URI}:${IMAGE_TAG}",
              "portMappings": [
                {
                  "containerPort": 80,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "DB_NAME",
                  "value": "${PROJECT_NAME}_${ENVIRONMENT}"
                },
                {
                  "name": "APP_ENV",
                  "value": "${ENVIRONMENT}"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/${ENVIRONMENT}/${CONTAINER_NAME}",
                  "awslogs-region": "${AWS_REGION}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
      - echo "Generating appspec.yaml..."
      - |
        cat > appspec.yaml << EOF
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: <TASK_DEFINITION>
                LoadBalancerInfo:
                  ContainerName: "${CONTAINER_NAME}"
                  ContainerPort: 80
        EOF
      - echo "Build completed successfully!"

artifacts:
  files:
    - imageDetail.json
    - imagedefinitions.json
    - taskdef.json
    - appspec.yaml
  discard-paths: yes 